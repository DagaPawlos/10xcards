name: Pull Request CI

on:
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  unit-test:
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/

  e2e-test:
    runs-on: ubuntu-latest
    needs: lint
    environment: integration
    
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/results/
            playwright-report/

      - name: Upload E2E test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-coverage
          path: coverage-e2e/

  status-comment:
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always()
    permissions:
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download unit test coverage
        uses: actions/download-artifact@v5
        with:
          name: unit-test-coverage
          path: coverage/

      - name: Download E2E test coverage
        uses: actions/download-artifact@v5
        with:
          name: e2e-test-coverage
          path: coverage-e2e/

      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get job statuses
            const lintStatus = '${{ needs.lint.result }}';
            const unitTestStatus = '${{ needs.unit-test.result }}';
            const e2eTestStatus = '${{ needs.e2e-test.result }}';
            
            // Status emojis
            const getStatusEmoji = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '❓';
              }
            };
            
            // Overall status
            const allPassed = lintStatus === 'success' && unitTestStatus === 'success' && e2eTestStatus === 'success';
            const overallStatus = allPassed ? '✅ All checks passed!' : '❌ Some checks failed';
            
            // Create coverage summary
            let coverageSummary = '';
            try {
              if (fs.existsSync('coverage/coverage-summary.json')) {
                const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
                const total = coverage.total;
                coverageSummary = `
            **Unit Test Coverage:**
            - Lines: ${total.lines.pct}%
            - Functions: ${total.functions.pct}%
            - Branches: ${total.branches.pct}%
            - Statements: ${total.statements.pct}%`;
              }
            } catch (error) {
              coverageSummary = '\n**Unit Test Coverage:** Not available';
            }
            
            const comment = `## ${overallStatus}
            
            ### Test Results
            | Job | Status | Result |
            |-----|---------|--------|
            | Linting | ${getStatusEmoji(lintStatus)} | ${lintStatus} |
            | Unit Tests | ${getStatusEmoji(unitTestStatus)} | ${unitTestStatus} |
            | E2E Tests | ${getStatusEmoji(e2eTestStatus)} | ${e2eTestStatus} |
            ${coverageSummary}
            
            ---
            *Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('## ✅ All checks passed!') || 
              comment.body.includes('## ❌ Some checks failed')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
